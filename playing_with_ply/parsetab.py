
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x9bi\xc5^\xa8==F\xfft\xfeV\x8f\xa5 \xb0'
    
_lr_action_items = {'MACRO':([6,],[12,]),')':([3,6,9,10,11,15,16,17,18,19,20,22,24,25,26,27,],[-13,-11,-14,-15,15,-8,-12,-9,-9,21,23,-10,26,27,-7,-6,]),'(':([0,3,4,6,8,9,10,11,12,13,15,16,21,23,26,27,],[6,-13,6,-11,6,-14,-15,6,17,18,-8,-12,6,6,-7,-6,]),'NUMBER':([0,3,4,6,8,9,10,11,15,16,21,23,26,27,],[3,-13,3,-11,3,-14,-15,3,-8,-12,3,3,-7,-6,]),'QUOTE':([0,3,4,6,8,9,10,11,15,16,21,23,26,27,],[4,-13,4,-11,4,-14,-15,4,-8,-12,4,4,-7,-6,]),'ATOM':([0,3,4,6,8,9,10,11,15,16,17,18,19,20,21,22,23,26,27,],[2,-13,9,-11,9,-14,-15,9,-8,-12,-9,-9,22,22,9,-10,9,-7,-6,]),'LAMBDA':([6,],[13,]),'=':([2,],[8,]),'$end':([1,2,3,5,7,9,10,14,15,26,27,],[-4,-14,-13,0,-3,-14,-15,-5,-8,-7,-6,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,],[1,]),'expression_list':([6,],[11,]),'atom_list':([17,18,],[19,20,]),'expression':([0,4,8,11,21,23,],[7,10,14,16,24,25,]),'statement':([0,],[5,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','another_language.py',45),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','another_language.py',46),
  ('statement -> expression','statement',1,'p_statement_expression','another_language.py',52),
  ('statement -> assignment','statement',1,'p_statement_assignment','another_language.py',56),
  ('assignment -> ATOM = expression','assignment',3,'p_assignment','another_language.py',60),
  ('expression -> ( LAMBDA ( atom_list ) expression )','expression',7,'p_lambda_expression','another_language.py',64),
  ('expression -> ( MACRO ( atom_list ) expression )','expression',7,'p_macro_expression','another_language.py',68),
  ('expression -> ( expression_list )','expression',3,'p_expression_list','another_language.py',72),
  ('atom_list -> <empty>','atom_list',0,'p_atom_list','another_language.py',76),
  ('atom_list -> atom_list ATOM','atom_list',2,'p_atom_list','another_language.py',77),
  ('expression_list -> <empty>','expression_list',0,'p_list','another_language.py',85),
  ('expression_list -> expression_list expression','expression_list',2,'p_list','another_language.py',86),
  ('expression -> NUMBER','expression',1,'p_expression_number','another_language.py',94),
  ('expression -> ATOM','expression',1,'p_expression_atom','another_language.py',98),
  ('expression -> QUOTE expression','expression',2,'p_expression_quote','another_language.py',102),
]
